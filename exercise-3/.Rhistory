install.packages("styler")
install.packages(lintr)
install.packages("lintr")
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
view(vehicles)
View(vehicles)
makes <- vehicles$make
length(unique(makes))
cars_1997 <- vehicles[vehicles$year == 1997]
cars_1997 <- vehicles[vehicles$year == 1997, ]
milage_1997 <- cars_1997[order(cars_1997$hwy)]
cars_1997 <- cars_1997[order(cars_1997$hwy)]
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
cars_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
most_hwy_each_year <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
make_year_filter('Honda', 1995)
most_hwy_each_year('Honda', 1995)
most_hwy_each_year('Honda', 1995)
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
make_year_filter('Honda', 1995)
most_make_year <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
most_make_year('Honda', 1995)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
shiny::runApp('Desktop/INFO201/ch16-shiny/exercise-3')
runApp('Desktop/INFO201/ch16-shiny/exercise-3')
setwd("~/Desktop/INFO201/ch16-shiny/exercise-3")
runApp()
runApp()
?mpg
?Mpg
View(mpg)
select_values <- colnames(mpg)
?mpg
??mpg
runApp()
runApp()
runApp()
setwd("~/Desktop/INFO201/ch16-shiny/exercise-3")
runApp()
runApp()
library(ggplot2)
select_values <- colnames(mpg)
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
shinyUi(ui)
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
install.packages(shiny)
install.packages("shiny")
shiny::runApp()
runApp()
install.packages("shiny")
shinyApp(ui, server))
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp()
runApp()
install.packages("shiny")
library(shiny)
runApp()
runApp()
# UI for scatterplot
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
shinyUI(ui)
shinyUI(ui)
